
teensy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000601  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000020a  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000403  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001de  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000044  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea ef       	ldi	r30, 0xFA	; 250
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 30       	cpi	r26, 0x00	; 0
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 30       	cpi	r26, 0x00	; 0
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  e2:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <adc_read>:
/* Read a channel from the ADC bank */
uint16_t adc_read(uint8_t channel) {
	uint8_t low;
	
	// Set the reference voltage to AVCC, and select the channel
	ADMUX = (1 << REFS0) | (channel & 0x1F);
  ea:	98 2f       	mov	r25, r24
  ec:	9f 71       	andi	r25, 0x1F	; 31
  ee:	90 64       	ori	r25, 0x40	; 64
  f0:	90 93 7c 00 	sts	0x007C, r25
	
	ADCSRA |= (1 << ADEN);                      // Enable the ADC
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	90 68       	ori	r25, 0x80	; 128
  fc:	90 83       	st	Z, r25
	ADCSRB = (1 << ADHSM) | (channel & 0x20);   // High speed mode
  fe:	80 72       	andi	r24, 0x20	; 32
 100:	80 68       	ori	r24, 0x80	; 128
 102:	80 93 7b 00 	sts	0x007B, r24
	ADCSRA |= (1 << ADSC);                      // Start the conversion
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
	
	low = ADCL;
 10c:	80 91 78 00 	lds	r24, 0x0078
	return (ADCH << 8) | low;
 110:	90 91 79 00 	lds	r25, 0x0079
 114:	39 2f       	mov	r19, r25
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	82 2b       	or	r24, r18
 11c:	93 2b       	or	r25, r19
}
 11e:	08 95       	ret

00000120 <timer_read>:

uint16_t timer_read() {
	uint16_t i;
	
	i = TCNT0;
 120:	86 b5       	in	r24, 0x26	; 38
	return i;
}
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret

00000126 <get_timer>:

uint16_t get_timer(uint8_t channel) {
	if (channel == 0) return TCNT1;
 126:	88 23       	and	r24, r24
 128:	29 f4       	brne	.+10     	; 0x134 <get_timer+0xe>
 12a:	80 91 84 00 	lds	r24, 0x0084
 12e:	90 91 85 00 	lds	r25, 0x0085
 132:	08 95       	ret
	return TCNT3;
 134:	80 91 94 00 	lds	r24, 0x0094
 138:	90 91 95 00 	lds	r25, 0x0095
}
 13c:	08 95       	ret

0000013e <init_lcd>:

void init_lcd(void) {
	PORTD = _BV(PD0) | _BV(PD1);
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	8b b9       	out	0x0b, r24	; 11
	DDRD = 0;
 142:	1a b8       	out	0x0a, r1	; 10
	TWBR = (F_CPU / 100000UL - 16) / 2;
 144:	88 e4       	ldi	r24, 0x48	; 72
 146:	80 93 b8 00 	sts	0x00B8, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	99 e6       	ldi	r25, 0x69	; 105
 14e:	a8 e1       	ldi	r26, 0x18	; 24
 150:	81 50       	subi	r24, 0x01	; 1
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	a0 40       	sbci	r26, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <init_lcd+0x12>
 158:	00 c0       	rjmp	.+0      	; 0x15a <init_lcd+0x1c>
 15a:	00 00       	nop
	//TWBR = 46;
	
	_delay_ms(500);
}
 15c:	08 95       	ret

0000015e <send_char>:

// Blocking serial transmit
void send_char(uint8_t c) {
	while (!(UCSR1A & (1 << UDRE1)))
 15e:	e8 ec       	ldi	r30, 0xC8	; 200
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	90 81       	ld	r25, Z
 164:	95 ff       	sbrs	r25, 5
 166:	fd cf       	rjmp	.-6      	; 0x162 <send_char+0x4>
		;
	
	UDR1 = c;
 168:	80 93 ce 00 	sts	0x00CE, r24
}
 16c:	08 95       	ret

0000016e <receive_char>:

 // Blocking serial receive
uint8_t receive_char(void) {
	while (!(UCSR1A && (1 << RXC1)))
 16e:	e8 ec       	ldi	r30, 0xC8	; 200
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	e9 f3       	breq	.-6      	; 0x172 <receive_char+0x4>
		;
	
	return UDR1;
 178:	80 91 ce 00 	lds	r24, 0x00CE
}
 17c:	08 95       	ret

0000017e <main>:
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 17e:	97 e0       	ldi	r25, 0x07	; 7
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	80 93 61 00 	sts	0x0061, r24
 18a:	90 93 61 00 	sts	0x0061, r25
 18e:	0f be       	out	0x3f, r0	; 63
 190:	8f e3       	ldi	r24, 0x3F	; 63
 192:	9c e9       	ldi	r25, 0x9C	; 156
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x16>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x1c>
 19a:	00 00       	nop
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	80 93 61 00 	sts	0x0061, r24
 1a8:	90 93 61 00 	sts	0x0061, r25
 1ac:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_128);
	_delay_ms(10);
	clock_prescale_set(clock_div_1);
	
	// Set up the serial port to 9600, 8N1
	UBRR1H = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 cd 00 	sts	0x00CD, r24
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
 1b4:	88 e1       	ldi	r24, 0x18	; 24
 1b6:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (1 << UCSZ10) | (1 << UCSZ11);
 1ba:	86 e0       	ldi	r24, 0x06	; 6
 1bc:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1L = 103;
 1c0:	87 e6       	ldi	r24, 0x67	; 103
 1c2:	80 93 cc 00 	sts	0x00CC, r24
	
	// Set LED outputs
	DDRE |= (1 << 2);
 1c6:	6a 9a       	sbi	0x0d, 2	; 13
	DDRD |= (1 << 0);
 1c8:	50 9a       	sbi	0x0a, 0	; 10
	
	// Set timer prescalers to 1024 (0x500)
	TCCR0A = 0;
 1ca:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 5;
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	85 bd       	out	0x25, r24	; 37
	
	// Set LED1 on and LED2 off
	PORTE |= (1 << 2);
 1d0:	72 9a       	sbi	0x0e, 2	; 14
	PORTB &= ~(1 << 0);
 1d2:	28 98       	cbi	0x05, 0	; 5
	
	// Do the opposite
	PORTE &= ~(1 << 2);
 1d4:	72 98       	cbi	0x0e, 2	; 14
	PORTB |= (1 << 0);
 1d6:	28 9a       	sbi	0x05, 0	; 5
	
	// Set ADC prescaler to 128. Would 64 be better?
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 1d8:	ea e7       	ldi	r30, 0x7A	; 122
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	87 60       	ori	r24, 0x07	; 7
 1e0:	80 83       	st	Z, r24
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	91 ee       	ldi	r25, 0xE1	; 225
 1e6:	a4 e0       	ldi	r26, 0x04	; 4
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	a0 40       	sbci	r26, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x6a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x74>
 1f2:	00 00       	nop
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main+0x76>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
